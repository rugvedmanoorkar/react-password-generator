[{"C:\\Users\\320007887\\Documents\\Tim\\react-password-generator\\react-password-generator\\src\\reportWebVitals.js":"1","C:\\Users\\320007887\\Documents\\Tim\\react-password-generator\\react-password-generator\\src\\App.js":"2","C:\\Users\\320007887\\Documents\\Tim\\react-password-generator\\react-password-generator\\src\\components\\Header.js":"3","C:\\Users\\320007887\\Documents\\Tim\\react-password-generator\\react-password-generator\\src\\components\\Conditions.js":"4"},{"size":362,"mtime":1607504511139,"results":"5","hashOfConfig":"6"},{"size":247,"mtime":1611991322855,"results":"7","hashOfConfig":"6"},{"size":199,"mtime":1611990283017,"results":"8","hashOfConfig":"6"},{"size":3281,"mtime":1612172887053,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"143ble5",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"C:\\Users\\320007887\\Documents\\Tim\\react-password-generator\\react-password-generator\\src\\reportWebVitals.js",[],"C:\\Users\\320007887\\Documents\\Tim\\react-password-generator\\react-password-generator\\src\\App.js",[],"C:\\Users\\320007887\\Documents\\Tim\\react-password-generator\\react-password-generator\\src\\components\\Header.js",[],"C:\\Users\\320007887\\Documents\\Tim\\react-password-generator\\react-password-generator\\src\\components\\Conditions.js",["19","20"],"import React ,{ useState } from 'react'\r\nimport { generatePassword, Preferences } from '@password-generator/package'\r\n\r\nconst Conditions = () => {\r\n\r\n    const [preferences, setPreferences] = useState({\r\n        initialText: '',\r\n        passwordLength: 6,\r\n        pronounceable: false,\r\n        uppercase: true,\r\n        lowercase: false,\r\n        numbers: true,\r\n        symbols: false,\r\n      });\r\n      const [password, setPassword] = useState('');\r\n    \r\n      const onSubmit = e => {\r\n        e.preventDefault();\r\n        console.log({preferences})\r\n        const passwordGenerated = generatePassword({\r\n            length: preferences.passwordLength,\r\n            initialText: preferences.initialText,\r\n            useChars: {\r\n              lowercase: preferences.lowercase,\r\n              numbers: preferences.numbers,\r\n              symbols: preferences.symbols,\r\n              uppercase: preferences.uppercase,\r\n              pronounceable: preferences.pronounceable,\r\n            },\r\n          });\r\n        setPassword(passwordGenerated);\r\n        console.log({passwordGenerated})\r\n      }  \r\n\r\n      const handleTogglePronounceable = () => {\r\n          if(preferences.pronounceable == false ) {\r\n              setPreferences({\r\n                  ...preferences,\r\n                  uppercase: true,\r\n                    lowercase: false,\r\n                    numbers: true,\r\n                    symbols: false,\r\n                    pronounceable: true,\r\n              })\r\n          }  else{\r\n              setPreferences({\r\n                  ...preferences,\r\n                  pronounceable: false,\r\n              })\r\n          }\r\n          }\r\n      \r\n\r\n    return (\r\n        <div className='conditions' >\r\n            <label >{password}</label><p />\r\n           Password Length <input type=\"text\" value={preferences.passwordLength}  onChange={(e) => {setPreferences({...preferences,passwordLength: Number(e.target.value),});}} placeholder=\"6\" /><p />\r\n           Add Initial Text<input type=\"input\" value={preferences.initialText}  onChange={(e) => {setPreferences({...preferences,initialText: (e.target.value),});}}  /><p />\r\n           Pronouncable<input type=\"checkbox\" value={preferences.pronounceable}  onChange={handleTogglePronounceable}  /><p />\r\n           Include Uppercase Characters<input type=\"checkbox\" value={preferences.uppercase} onChange={() => { setPreferences({...preferences, uppercase: !preferences.uppercase, });}} disabled={preferences.pronounceable} /> <p />\r\n           Include Lowerase Characters<input type=\"checkbox\" value={preferences.lowercase} onChange={() => { setPreferences({...preferences, lowercase: !preferences.lowercase, });}} disabled={preferences.pronounceable}/><p />\r\n           Include Numbers<input type=\"checkbox\" value={preferences.numbers} onChange={() => { setPreferences({...preferences, numbers: !preferences.numbers, });}} disabled={preferences.pronounceable}/><p />\r\n           Include Symbols<input type=\"checkbox\" value={preferences.symbols} onChange={() => { setPreferences({...preferences, symbols: !preferences.symbols, });}} disabled={preferences.pronounceable}/><p />\r\n           <button type=\"submit\" onClick = {onSubmit}>Generate Password</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Conditions\r\n",{"ruleId":"21","severity":1,"message":"22","line":2,"column":28,"nodeType":"23","messageId":"24","endLine":2,"endColumn":39},{"ruleId":"25","severity":1,"message":"26","line":36,"column":40,"nodeType":"27","messageId":"28","endLine":36,"endColumn":42},"no-unused-vars","'Preferences' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]